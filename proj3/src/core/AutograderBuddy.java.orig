package core;

import edu.princeton.cs.algs4.In;
import tileengine.TETile;
import tileengine.Tileset;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Objects;

import static tileengine.Tileset.fG;

public class AutograderBuddy {

    /**
     * Simulates a game, but doesn't render anything or call any StdDraw
     * methods. Instead, returns the world that would result if the input string
     * had been typed on the keyboard.
     *
     * Recall that strings ending in ":q" should cause the game to quit and
     * save. To "quit" in this method, save the game to a file, then just return
     * the TETile[][]. Do not call System.exit(0) in this method.
     *
     * @param input the input string to feed to your program
     * @return the 2D TETile[][] representing the state of the world
     */
    public static TETile[][] getWorldFromInput(String input) {
<<<<<<< HEAD
        //first step get the number (**** this is seed) in between ("N*****S")
        // do this by parsing and for loop
        //start with empty string with he keys typed so far to keep track with whatever has been typed
        // and then feed it into the world
        int newSeed = Integer.parseInt(input.substring(1, input.length() - 1));
        World gameStart = new World(newSeed);
        return gameStart.returnWorld();
//        for (int i = 0; i < input.length(); i++) {
//
//            input.charAt(0);
//            input.
//        }
//        int newseed = Integer.parseInt(input);
=======
        long seed = 0;
        boolean beforeN = true;
        String avatarName = "";
        fG = new TETile[60][30];
        Tileset.colorGradient(fG);
        //TERenderer ter = new TERenderer();
        Tileset.MyComponent gradient = new Tileset.MyComponent();
        BufferedImage image = new BufferedImage(60, 30, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = image.createGraphics();
        gradient.paint(g);
        //ter.initialize(60, 33);
        int z = 0;
        int y = 0;
        World world = null;
        Game game = null;
        HUD hud = new HUD();
        Move move = new Move();
        TETile[][] defaultTiles = new TETile[60][30];
        for (int x = 0; x < 60; x++) {
            for (int p = 0; p < 30; p++) {
                defaultTiles[x][p] = Tileset.CUSTOM_NOTHING;
            }
        }
        for (int i = 0; i < input.length(); i++) {
            if (beforeN) {
                if (input.charAt(i) == 'N' || input.charAt(i) == 'n') {
                    beforeN = true;
                    break;
                }
                if (input.charAt(i) == 'L' || input.charAt(i) == 'l') {
                    //Menu menu = new Menu(60, 30);
                    AutograderBuddy auto = new AutograderBuddy();
                    world = auto.autoLoadGame();
                    boolean colon = false;
                    boolean lightsOff = world.getLightsOff();
                    return auto.autoHelper(world, z, input, colon, game, lightsOff, hud, move);
                } else if (input.charAt(i) == 'Q' || input.charAt(i) == 'q') {
                    return defaultTiles;
                } else if (input.charAt(i) == 'A' || input.charAt(i) == 'a') {
                    for (int j = i; j < input.length(); j++) {
                        if (input.charAt(j) == '+') {
                            avatarName = input.substring(i + 1, j);
                            y = j;
                        }
                    }
                }
            }
        }
        for (int i = y; i < input.length(); i++) {
            if (input.charAt(i) == 'N' || input.charAt(i) == 'n') {
                beforeN = false;
                for (int j = i; j < input.length(); j++) {
                    if (input.charAt(j) == 'S' || input.charAt(j) == 's') {
                        seed = Long.parseLong(input.substring(i + 1, j));
                        world = new World(seed);
                        world.addFirstAvatar();
                        if (!Objects.equals(avatarName, "")) {
                            world.setAvatarName(avatarName);
                        }
                        game = new Game();
                        //ter.renderFrame(world.getTiles());
                        //hud.renderHUD(world);
                        z = j;
                        break;
                    }
                }
            }
        }
        if (world == null) {
            return defaultTiles;
        } else {
            AutograderBuddy auto = new AutograderBuddy();
            boolean colon = false;
            boolean lightsOff = world.getLightsOff();
            return auto.autoHelper(world, z, input, colon, game, lightsOff, hud, move);
        }
>>>>>>> Justin
    }

    private TETile[][] autoHelper(World world, int z, String input, boolean colon,
                            Game game, boolean lightsOff, HUD hud, Move move) {
        //TERenderer ter = new TERenderer();
        for (int i = z; i < input.length(); i++) {
            char key = input.charAt(i);
            if (colon && (key == 'Q' || key == 'q')) {
                /*
                File file = new File("C:\\Programs\\CS61B\\fa23-proj3-g232\\proj3\\src\\gamelog\\savedGame.txt");
                if (file.exists()) {
                    file.delete();
                }

                 */
                long lastSeed = world.getSeed();
                String aName = world.getAvatarName();

                //save avatar position
                String aPos = world.getAPos()[0] + "," + world.getAPos()[1];
                try {
                    File file = new File("C:\\Programs\\CS61B\\fa23-proj3-g232\\proj3\\saveGame.txt");
                    //Path file = Paths.get("C:\\Programs\\CS61B\\fa23-proj3-g232\\proj3\\saveGame.txt");
                    FileWriter myWriter = new FileWriter(file);
                    myWriter.write(lastSeed + "\n"); //first line seed
                    myWriter.write(aPos + "\n"); //second line avatar position
                    myWriter.write(lightsOff + "\n"); //third line lights on/off
                    if (aName != null) { //fourth line avatar name (if any)
                        myWriter.write(aName);
                    }
                    myWriter.close();
                    System.out.println("Successfully saved the game file.");
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
                colon = false;
                TETile[][] defaultTiles = new TETile[60][30];
                for (int x = 0; x < 60; x++) {
                    for (int p = 0; p < 30; p++) {
                        defaultTiles[x][p] = Tileset.CUSTOM_NOTHING;
                    }
                }
                return defaultTiles;
            } else if (key == ':') {
                colon = true;
            } else if (key == 'f' || key == 'F') {
                if (lightsOff) { //so turn on
                    //ter.renderFrame(world.getTiles());
                    //hud.renderHUD(world);
                    lightsOff = false;
                } else { //so turn off
                    TETile[][] lightGrid = world.getLitSurrounding();
                    //ter.renderFrame(lightGrid);
                    lightsOff = true;
                }
            } else {
                move.move(world, world.getAPos(), key, lightsOff);
                if (lightsOff) {
                    TETile[][] lightGrid = world.getLitSurrounding();
                    //ter.renderFrame(lightGrid);
                    //otherwise rerender the full world
                }
            }
        }
        return world.getTiles();
    }

    public World autoLoadGame() {

        File file = new File("C:\\Programs\\CS61B\\fa23-proj3-g232\\proj3\\saveGame.txt");
        if (file.length() > 0) {
            In in = new In(file);
            String strSeed = in.readLine();
            String positionStr = in.readLine();
            String strAx = positionStr.split(",")[0];
            String strAy = positionStr.split(",")[1];
            String strLightsOff = in.readLine();
            //String aName = in.readLine();

            long seed1 = Long.parseLong(strSeed);
            int aPosX = Integer.parseInt(strAx);
            int aPosY = Integer.parseInt(strAy);
            boolean lightsOff = Boolean.parseBoolean(strLightsOff);

            World world = new World(seed1);
            Game game = new Game();
            TETile avatar = new TETile('@', Color.white,
                    Tileset.MyComponent.getColorAt(Tileset.MyComponent.getGradientPaint(), aPosX, aPosY), "you");
            world.getTiles()[aPosX][aPosY] = avatar;
            //world.setAvatarName(aName);
            world.setLights(lightsOff); //must be done after making world
            world.setAPos(new int[]{aPosX, aPosY});

            //TERenderer ter = new TERenderer();
            //ter.renderFrame(world.getTiles());
            //hud.renderHUD(world);
            return world;
            //game.runGame(world, 60, 30);

        } else {
            TETile[][] defaultTiles = new TETile[60][30];
            for (int x = 0; x < 60; x++) {
                for (int p = 0; p < 30; p++) {
                    defaultTiles[x][p] = Tileset.CUSTOM_NOTHING;
                }
            }
            return null;
        }

    }

    /**
     * Used to tell the autograder which tiles are the floor/ground (including
     * any lights/items resting on the ground). Change this
     * method if you add additional tiles.
     */
    public static boolean isGroundTile(TETile t) {
        return t.character() == Tileset.FLOOR.character()
                || t.character() == Tileset.AVATAR.character()
                || t.character() == Tileset.FLOWER.character();
    }

    /**
     * Used to tell the autograder while tiles are the walls/boundaries. Change
     * this method if you add additional tiles.
     */
    public static boolean isBoundaryTile(TETile t) {
        return t.character() == Tileset.WALL.character()
                || t.character() == Tileset.LOCKED_DOOR.character()
                || t.character() == Tileset.UNLOCKED_DOOR.character();
    }
}
